" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
"                    __ _ _____              _
"         ___ _ __  / _/ |___ /      __   __(_)_ __ ___
"        / __| '_ \| |_| | |_ \ _____\ \ / /| | '_ ` _ \
"        \__ \ |_) |  _| |___) |_____|\ V / | | | | | | |
"        |___/ .__/|_| |_|____/        \_/  |_|_| |_| |_|
"            |_|
"
"   This is the personal .vimrc.bundles file of Steve Francia.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   This file imports the various plugins of spf13. If you
"   wish to alter which groups are imported, see vimrc.before.
"   If you wish to add or remove individual bundles, create
"   ~/.vimrc.bundles.local and `Bundle` or `UnBundle` as needed
"   from there.
"
"   You can find me at http://spf13.com
" }

" Environment {

    " Basics {
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }

    " Setup Bundle Support {
        " The next three lines ensure that the ~/.vim/bundle/ system works
        call plug#begin()
        call plug#begin('~/.vim/plugged')
    " }

" }

" plugs {


    " list only the plugin groups you will use
    if !exists('g:spf13_bundle_groups')
        let g:spf13_bundle_groups=['general', 'writing', 'neocomplete', 'programming', 'php', 'ruby', 'python', 'javascript', 'html', 'misc','youcompleteme']
    endif

    " To override all the included bundles, add the following to your
    " .vimrc.bundles.local file:
    "   let g:override_spf13_bundles = 1
    if !exists("g:override_spf13_bundles")

    " Integrations {

        " General {
            if count(g:spf13_bundle_groups, 'general')
                Plug 'scrooloose/nerdtree'
                Plug 'jistr/vim-nerdtree-tabs'
                Plug 'vim-scripts/BufOnly.vim'
                Plug 'tpope/vim-fugitive'
                Plug 'chrisbra/nrrwrgn'
        "
            endif
            if !exists('g:spf13_no_views')
                Plug 'vim-scripts/restore_view.vim'
            endif
        " }

        " General Programming {
            if count(g:spf13_bundle_groups, 'programming')
                Plug 'ctrlpvim/ctrlp.vim'
                Plug 'tacahiroy/ctrlp-funky'
                Plug 'sessionman.vim'
                Plug 'sjl/gundo.vim'
                Plug 'thinca/vim-quickrun'
                Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
                Plug 'junegunn/fzf.vim'
                if executable('ctags')
                    Plug 'majutsushi/tagbar'
                endif

            endif
        " }

        "  Writing {
        if count(g:spf13_bundle_groups, 'writing')
            Plug 'powerline/fonts'
            Plug 'kana/vim-textobj-user'
            Plug 'kana/vim-textobj-indent'
            Plug 'reedes/vim-textobj-sentence'
            Plug 'reedes/vim-textobj-quote'
            Plug 'reedes/vim-wordy'
            Plug 'reedes/vim-litecorrect'
        endif
        " }

    " }

    " Interface {

        " Themes {
            Plug 'altercation/vim-colors-solarized'
            Plug 'flazz/vim-colorschemes'
            if (has("python") || has("python3")) && exists('g:spf13_use_powerline') && !exists('g:spf13_use_old_powerline')
                Plug 'Lokaltog/powerline', {'rtp':'/powerline/bindings/vim'}
            elseif exists('g:spf13_use_powerline') && exists('g:spf13_use_old_powerline')
                Plug 'Lokaltog/vim-powerline'
            else
                Plug 'vim-airline/vim-airline'
                Plug 'vim-airline/vim-airline-themes'
            endif
        " }

        " code display {
            Plug 'nathanaelkane/vim-indent-guides'
            Plug 'luochen1990/rainbow'
            Plug 'gregsexton/matchtag'
        " }

    " }

    " Completion {

        " Syntax {
            Plug 'scrooloose/syntastic'
            Plug 'plasticboy/vim-markdown'
        " }

        " copy edit, move, search ... {

            " move, search
            Plug 'haya14busa/incsearch-fuzzy.vim'
            Plug 'easymotion/vim-easymotion'
            Plug 'haya14busa/incsearch.vim'

            if executable('ag')
                Plug 'mileszs/ack.vim'
                let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
            elseif executable('ack-grep')
                let g:ackprg="ack-grep -H --nocolor --nogroup --column"
                Plug 'mileszs/ack.vim'
            elseif executable('ack')
                Plug 'mileszs/ack.vim'
            endif

            " format code
            Plug 'junegunn/vim-easy-align'
            Plug 'tpope/vim-surround'

            " edit
            Plug 'scrooloose/nerdcommenter'
            Plug 'danro/rename.vim'
            Plug 'tpope/vim-abolish'
            Plug 'terryma/vim-multiple-cursors'
            Plug 'ntpeters/vim-better-whitespace'
            Plug 'terryma/vim-expand-region'

            "auto-pair
            Plug 'alvan/vim-closetag'
            Plug 'jiangmiao/auto-pairs'
        "}

    " Snippets & AutoComplete {
            if count(g:spf13_bundle_groups, 'snipmate')
                Plug 'garbas/vim-snipmate'
                Plug 'honza/vim-snippets'
                " Source support_function.vim to support vim-snippets.
                if filereadable(expand("~/.vim/plugged/vim-snippets/snippets/support_functions.vim"))
                    source ~/.vim/plugged/vim-snippets/snippets/support_functions.vim
                endif
            elseif count(g:spf13_bundle_groups, 'youcompleteme')
                Plug 'Valloric/YouCompleteMe'
                Plug 'SirVer/ultisnips'
                Plug 'honza/vim-snippets'
                "List of JavaScript ES6 snippets and syntax highlighting
                Plug 'isruslan/vim-es6'
            elseif count(g:spf13_bundle_groups, 'neocomplcache')
                Bundle 'Shougo/neocomplcache'
                Bundle 'Shougo/neosnippet'
                Bundle 'Shougo/neosnippet-snippets'
                Bundle 'honza/vim-snippets'
            elseif count(g:spf13_bundle_groups, 'neocomplete')
                Plugin 'honza/vim-snippets'
                Plugin 'sirver/ultisnips'
            endif
        " }

    "}

    " Langeuage {

        " HTML/CSS {
            if count(g:spf13_bundle_groups, 'html')
                Plug 'othree/html5.vim'
                Plug 'tpope/vim-haml'
                Plug 'mattn/emmet-vim'
                Plug 'hail2u/vim-css3-syntax'
                Plug 'ap/vim-css-color'
            endif
        " }

        " Ruby {
            if count(g:spf13_bundle_groups, 'ruby')
                Plug 'tpope/vim-rails'
                let g:rubycomplete_buffer_loading = 1
                Plug 'vim-ruby/vim-ruby'
                Plug 'tpope/vim-endwise'
            endif
        " }

        " Javascript {
            if count(g:spf13_bundle_groups, 'javascript')
                Plug 'pangloss/vim-javascript'
                Plug 'kchmck/vim-coffee-script'
            endif
        " }


        call plug#end()"

    "}


    endif

" }

" Use fork bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.fork"))
        source ~/.vimrc.bundles.fork
    endif
" }

" Use local bundles config if available {
    if filereadable(expand("~/.vimrc.bundles.local"))
        source ~/.vimrc.bundles.local
    endif
" }
